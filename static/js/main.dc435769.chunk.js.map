{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/Loader/Loader.tsx","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","filterReducer","addTodos","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","Loader","className","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","props","dispatch","filteredTodos","loading","map","id","completed","title","onClick","currentTodoActions","setTodo","TodoFilter","value","onChange","event","FilterActions","target","placeholder","style","pointerEvents","length","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","userId","undefined","href","email","name","App","isLoading","setIsLoading","toLowerCase","includes","todosFromServer","AddTodosAction","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc435769.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return { ...action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetFilterStatus = {\n  type: 'filter/SET_STATUS',\n  payload: Status,\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setFilter = (status: Status): SetFilterStatus => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\ntype Action = SetQueryAction | SetFilterStatus;\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nexport const actions = { setQuery, setFilter };\n\nconst filterReducer = (state: State = initialState, action: Action) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddTodosAction = { type: 'todos/ADD', payload: Todo[] };\n\nconst addTodos = (todos: Todo[]): AddTodosAction => ({\n  type: 'todos/ADD', payload: todos,\n});\n\ntype Action = AddTodosAction;\nexport const actions = { addTodos };\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return action.payload;\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport className from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  filteredTodos: Todo[]\n  loading: boolean\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const setTodo = (todo: Todo) => dispatch(currentTodoActions.setTodo(todo));\n\n  const {\n    filteredTodos,\n    loading,\n  } = props;\n\n  return (\n\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>Title</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredTodos.map((todo) => {\n          return (\n            loading\n              ? <Loader />\n              : (\n                <tr\n                  key={todo.id}\n                  data-cy=\"todo\"\n                  className={className(currentTodo\n                    && currentTodo.id === todo.id\n                    && 'has-background-info-light')}\n                >\n                  <td className=\"is-vcentered\">{todo.id}</td>\n                  <td className=\"is-vcentered\">\n                    {todo.completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={className(todo.completed\n                      ? 'has-text-success'\n                      : 'has-text-danger')}\n                    >\n                      { todo.title }\n                    </p>\n                  </td>\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => setTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i className={className(currentTodo?.id === todo.id\n                          ? 'far fa-eye-slash'\n                          : 'far fa-eye')}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              )\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as FilterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const dispatch = useAppDispatch();\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(FilterActions.setQuery((event.target.value)));\n  };\n\n  const handleFilter = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(FilterActions.setFilter((event.target.value as Status)));\n  };\n\n  const handleClear = () => {\n    dispatch(FilterActions.setQuery(''));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleFilter}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n\n          {query.length > 0 && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              onClick={handleClear}\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport className from 'classnames';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const [user, setUser] = useState<User | null>(null);\n  const handleClose = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  useEffect(() => {\n    if (currentTodo !== undefined) {\n      getUser(currentTodo?.userId || 0)\n        .then(setUser);\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {currentTodo === null || user === null ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={className(currentTodo.completed\n                  ? 'has-text-success'\n                  : 'has-text-danger')}\n              >\n                {currentTodo.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable import/no-cycle */\n/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as AddTodosAction } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const { query, status } = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n\n  const filteredTodos = todos.filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()))\n    .filter(todo => {\n      switch (status) {\n        case 'active':\n          return !todo.completed;\n\n        case 'completed':\n          return todo.completed;\n\n        default:\n          return todo;\n      }\n    });\n\n  useEffect(() => {\n    getTodos()\n      .then((todosFromServer: Todo[]) => dispatch(AddTodosAction.addTodos(todosFromServer)))\n      .finally(() => setIsLoading(false));\n  }, [setIsLoading, AddTodosAction.addTodos]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              <TodoList\n                filteredTodos={filteredTodos}\n                loading={isLoading}\n              />\n              {isLoading && <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      { currentTodo && (\n        <TodoModal />\n      )}\n\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}